syntax = "proto3";

package v1;

service SessionService {
    // Start begins a new test run session
    rpc Start(StartSessionRequest) returns (StartSessionResponse) {}

    // Modify modifies the testcases/metadata of a session
    rpc Modify(ModifySessionRequest) returns (ModifySessionResponse) {}

    // Close closes a session so that no further participation is possible
    rpc Close(CloseSessionRequest) returns (CloseSessionResponse) {}

    // List returns all sessions
    rpc List(ListSessionsRequest) returns (stream ListSessionsResponse) {}

    // Register adds a new participant to the session. Returns an error
    // if a participant with that name already exists.
    rpc Register(RegistrationRequest) returns (RegistrationResponse) {}

    // Claim expresses a participants intent to execute a testcase
    rpc Claim(ClaimRequest) returns (ClaimResponse) {}

    // Contribute submitts the result of a testcas execution/run.
    // The same participant may contribute to the same testcase multiple times,
    // which updates previous contributions.
    rpc Contribute(ContributionRequest) returns (ContributionResponse) {}

    // Status returns the status of a test run
    rpc Status(SessionStatusRequest) returns (SessionStatusResponse) {}

    // Subscribes to updates on a test run
    rpc Updates(SessionUpdatesRequest) returns (stream SessionUpdateResponse) {}
}

message StartSessionRequest {
    // Name is the globally unique name of the session
    string name = 1;
    // Plan are the tests of the new session
    TestPlan plan = 2;
    // Annotations are key-value pairs containing metadata of the test session
    map<string, string> annotations = 3;
    // Modifiable controls if the session can be modified while it's open
    bool modifiable = 4;
}

message StartSessionResponse {
    // ID is the unique session ID required for participating
    string id = 1;
}

message ModifySessionRequest {
    // ID of the session to modify
    string id = 1;
    // Modification denotes which kind of operation should be performed
    Modification modification = 2;
    // The new complete set of testcases
    repeated Testcase case = 3;
    // The new set of annotations
    map<string, string> annotations = 4;
}

enum Modification {
    UPDATE_ANNOTATIONS = 0;
    ADD_TESTCASE = 10;
    MODIFY_TESTCASE = 11;
    REMOVE_TESTCASE = 12;
}

message ModifySessionResponse {}

message CloseSessionRequest {
    // ID of the session to close
    string id = 1;
}

message CloseSessionResponse {}

message ListSessionsRequest {}

message ListSessionsResponse {
    // The ID of the session
    string id = 1;
    // The name of the session
    string name = 2;
    // IsOpen is true if the session is still open for participation
    bool isOpen = 3;
}

message RegistrationRequest {
    // Session is the ID of the session a participant wants to join
    string session = 1;
}

message RegistrationResponse { }

message ClaimRequest {
    // ID of the session in which to claim the test
    string session = 1;
    // ID of the testcase to claim
    string testcaseID = 2;
    // True to claim the testcase, false to unclaim
    bool claim = 3;
}

message ClaimResponse {}

message ContributionRequest {
    // ID of the session in which to claim the test
    string session = 1;
    // ID of the testcase to contribute to
    string testcaseID = 2;
    // Result indicates the success of the testcase run
    TestRunState result = 3;
    // Comment is Markdown formatted text entered by the participant
    string comment = 4;
}

message ContributionResponse {}

message SessionStatusRequest {
    // The ID of the test run whose status to return
    string id = 1;
}

message SessionStatusResponse {
    TestRunStatus status = 1;
}

message SessionUpdatesRequest {
    // The ID of the test run to subscribe to
    string id = 1;
}

message SessionUpdateResponse {
    // ID of the session where this update originates from
    string id = 1;
    // Status is the current state of affairs
    TestRunStatus status = 2;
}

message Participant {
    // Name of the participant. Must be unique among all participants
    string name = 1;
}

message Testcase {
    // ID of the testcase. Must be unique within the test suite.
    string id = 1;
    // Name is the short description of the testcase
    string name = 2;
    // Groups helps organize testcases
    string group = 3;
    // Description is a long description
    string description = 4;
    // Steps lists the individual steps a tester should perform
    string steps = 5;
    // If true this testcase must pass for the suite to pass
    bool mustPass = 6;
    // MinTesterCount is the number of participants who need to run this test
    uint32 minTesterCount = 7;
    // Annotations are key-value pairs containing metadata of the test case
    map<string, string> annotations = 8;
}

enum TestRunState {
    PASSED = 0;
    UNDECIDED = 1;
    FAILED = 2;
}

message TestcaseRunResult {
    // Participant who contributed this result
    Participant participant = 1;
    // State denotes the success of a testcase
    TestRunState state = 2;
    // Comment is free text entered by the participant
    string comment = 3;
}

message TestcaseStatus {
    // The testcase this run concerns
    Testcase case = 1;
    // Claims mark testers who want to run a testcase
    repeated Participant claim = 2;
    // Runs are completed testcase executions
    repeated TestcaseRunResult result = 3;
    // State is the overall testcase success state
    TestRunState state = 4;
}

message TestRunStatus {
    // ID is the globally unique ID of this test run
    string id = 1;
    // Name is a short description of this run
    string name = 2;
    // Plan ID is the ID of the testplan being executed
    string planID = 3;
    // Open denotes if participants can still join and contribute
    bool open = 4;
    // Modifiable controls if session can be modified while it's open
    bool modifiable = 5;
    // Annotations are key-value pairs containing metadata of the test session
    map<string, string> annotations = 6;
    // Status lists the status for each testcase of the plan
    repeated TestcaseStatus case = 7;
    // State is the overall test run state
    TestRunState state = 8;
}

message TestPlan {
    // ID is the globally unique ID of this testplan
    string id = 1;
    // Name is the short description of the testplan
    string name = 2;
    // Description is a long description
    string description = 3;
    // Case lists the testcases of this plan
    repeated Testcase case = 4;
}
